{"version":3,"sources":["App.js","index.js"],"names":["App","props","changebackground","icon","answer","datebuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","convertdate","dt","Date","toLocaleString","hour","minute","hour12","setQuery","name","setState","query","autosugession","document","getElementsByClassName","style","display","autosuggesion","active","url","fetch","then","resp","json","data","features","handleClick","lonlat","getElementById","value","searchautocomplete","search","evt","key","api","urlbase","state","res","result","weather","className","this","sys","id","type","placeholder","onChange","e","target","onKeyPress","map","item","i","properties","onClick","geometry","coordinates","country","layer","coord","src","main","temp","feels_like","description","wind","speed","clouds","all","pressure","humidity","cod","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f1b1da85.chunk.js","sourcesContent":["import React, { useState, Component } from 'react';\n\nclass App extends Component {\n\n  //Khởi tạo constuctor\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: '',\n      weather: {},\n      autosuggesion: {\n        active: 0,\n        data: {}\n      },\n\n    }\n    //Tạo api\n    this.api = {\n      key: \"baedc2f2f31b7b3303e5d42d88d283c3\",\n      urlbase: \"https://api.openweathermap.org/data/2.5/weather\"\n    }\n\n    /*\n    *useState cho phép chúng ta khai báo local state trong Function Component cách mà trước để chỉ dùng cho Class Component.\n    *https://viblo.asia/p/doi-chut-ve-usestate-trong-react-hooks-07LKXpVeKV4\n\n    *query: định nghĩa tên của state nó có thể là đơn giá trị hoặc object,.. (là thamg số của useState)\n    *setQuery: định nghĩa tên function dùng cho việc update state (là thamg số của useState)\n    */\n    //const [weather, setWeather] = useState({});\n\n  }\n\n  /**\n   * Thay đổi lại background cho đúng với chủ đề thời tiết\n   * @param {*} icon \n   */\n  changebackground = (icon) => {\n    let answer;\n    switch (icon) {\n      case 800: case 801: case 802:\n        answer = \"sunny\";\n        break;\n      case 200: case 201: case 202:\n        answer = \"windy\";\n        break;\n      case 300: case 301: case 302:\n        answer = \"cloud\";\n        break;\n      default:\n        answer = \"rain\";\n    }\n    return 'app ' + answer + '';\n  }\n\n  /**\n   * chỉ dùng để convert ngày tháng cho đẹp\n   * @param {date} d - ngày tháng \n   */\n  datebuilder = (d) => {\n    let daysinweek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    let monthsinyear = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    let day = daysinweek[d.getDay()];\n    let date = d.getDate();\n    let month = monthsinyear[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  /**\n   * convert date sang local string cho đẹp\n   * @param {date} dt \n   */\n  convertdate = (dt) => {\n    return (new Date(dt * 1000)).toLocaleString('en-GB', { hour: '2-digit', minute: '2-digit', hour12: true })\n  }\n\n\n  /**\n   * Khi ta type keyword onchange nó sẽ bắt qua hàm này\n   * @param {string} name - từ khóa gợi ý \n   */\n  setQuery = (name) => {\n    this.setState({\n      query: name\n    });\n    //auto suggesion\n    this.autosugession(name)\n  }\n\n\n\n  /**\n   * Hàm tự động gợi ý từ khóa\n   * @param {string} name - từ khóa để gợi ý \n   */\n  autosugession = (name) => {\n    document.getElementsByClassName('autosuggesion')[0].style.display = \"block\"\n    this.setState({\n      autosuggesion: {\n        active: 1,\n      }\n    });\n\n    \n    const url = `https://app.geocodeapi.io/api/v1/search?apikey=557eb0d0-2577-11eb-99c5-1782ab3e0148&text=${name}`;\n    // site that doesn’t send Access-Control-*\n    fetch(url).then((resp) => resp.json())\n      .then((data) => {\n        this.setState({\n          autosuggesion: {\n            data: data.features\n          }\n        })\n    })\n  }\n\n  /**\n   * khi gợi ý xong, và người dùng click vào từng điểm gợi ý, ta sẽ dùng hàm này để show dự báo\n   * @param {object} lonlat\n   */\n  handleClick = (lonlat) => {\n    document.getElementsByClassName('autosuggesion')[0].style.display = \"none\"\n    document.getElementById('searchboxinput').value = \"\";\n    this.searchautocomplete(lonlat);\n  }\n\n\n  /**\n   * Sự kiện khi đánh xong seach và enter\n   * @param {object} evt  là hàm ta truyền vào để xác định hành động là enter hay không\n   */\n  search = evt => {\n    if (evt.key === \"Enter\") //nếu hành động là enter\n    {\n      //lúc này ta sử dụng fetch để crawl dữ liệu\n\n      fetch(`${this.api.urlbase}?q=${this.state.query}&units=metric&APPID=${this.api.key}`)\n        .then(\n          res => res.json()\n        )\n        .then(result => {\n          this.setState({\n            weather: result\n          });\n\n        })\n    }\n  }\n\n  /**\n   * Sự kiện đánh xong search nhưng click vào autocomplete\n   * @param {object} lonlat kinh độ và vĩ độ ở object\n   */\n  searchautocomplete = (lonlat) => {\n    //lúc này ta sử dụng fetch để crawl dữ liệu\n    fetch(`${this.api.urlbase}?lat=${lonlat[1]}&lon=${lonlat[0]}&units=metric&APPID=${this.api.key}`)\n      .then(\n        res => res.json()\n      )\n      .then(result => {\n        this.setState({\n          weather: result\n        });\n      })\n  }\n  render() {\n    return (\n      <div className={\n\n\n        (typeof (this.state.weather.sys)) === 'undefined' ? 'app' : this.changebackground(this.state.weather.weather[0].id)}>\n        <main>\n          <div className=\"searchbox\">\n            <input name=\"\" id=\"searchboxinput\" className=\"btn btn-primary search\" type=\"text\" placeholder=\"Search..\"\n\n              //Khi ta type key word\n              onChange={e => this.setQuery(e.target.value)}  //lúc này ta truyền giá trị  từ input vào setQuery\n              onKeyPress={this.search}\n            //value={query}\n            />\n\n            <div className=\"autosuggesion\">{(this.state.autosuggesion.active == 0) ? '' :\n              (typeof (this.state.autosuggesion.data) !== 'undefined') ?\n                this.state.autosuggesion.data.map((item, i) => {\n\n                  if (typeof (item.properties.name) !== 'undefined') {\n\n                    return <li\n                      key={i}\n                      name={item.properties.name}\n                      onClick={(e) => this.handleClick(item.geometry.coordinates, e)}\n\n                    >{item.properties.name},{item.properties.country}, {item.properties.layer}</li>;\n                  }\n                })\n                : ''\n            }</div>\n          </div>\n\n          {(typeof (this.state.weather.sys) !== 'undefined' && typeof (this.state.weather.coord) != 'undefined') ?\n            <div className=\"locationbox\">\n              <div className=\"locationname\">{this.state.weather.name}, {this.state.weather.sys.country}</div>\n              <div className=\"datetime\">Today: {this.datebuilder(new Date())}, Update: {this.convertdate(this.state.weather.dt)}</div>\n\n              <div className=\"weatherbox\">\n                <div className=\"temperature\"> <span><img src={'https://openweathermap.org/img/wn/' + this.state.weather.weather[0].icon + '@2x.png'} /> {this.state.weather.main.temp}°C <h2>Feels Like: {this.state.weather.main.feels_like}°C</h2></span></div>\n                <div className=\"weather\"> {this.state.weather.weather[0].description}</div>\n                <div className=\"weatherother\">\n                  <li>Wind: {this.state.weather.wind.speed} m/s</li>\n                  <li>Cloud: {this.state.weather.clouds.all} / 10</li>\n                  <li>Pressure: {this.state.weather.main.pressure} hpa</li>\n                  <li>humidity: {this.state.weather.main.humidity} % </li>\n                </div>\n              </div>\n            </div>\n\n            : (typeof (this.state.weather.sys) == 'undefined' && this.state.weather.cod === '404') ?\n              (<div className=\"searchinitial\"> LOCATION DOES NOT EXIST!</div>)\n              : (<div className=\"searchinitial\"> TYPE YOUR LOCATION ON SEARCH BOX</div>)\n          }\n\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}